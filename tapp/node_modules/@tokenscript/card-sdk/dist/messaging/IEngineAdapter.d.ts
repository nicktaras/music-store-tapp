export declare enum ViewEvent {
    TOKENS_UPDATED = "tokensUpdated",
    GET_USER_INPUT = "getUserInput",
    EXECUTE_CALLBACK = "executeCallback",
    ON_CONFIRM = "onConfirm",
    TRANSACTION_EVENT = "transactionEvent"
}
export declare enum RequestFromView {
    SIGN_PERSONAL_MESSAGE = "signPersonalMessage",
    PUT_USER_INPUT = "putUserInput",
    CLOSE = "close",
    OPEN_CARD = "openCard",
    ETH_RPC = "ethRpc",
    LOCAL_STORAGE = "localStorage",
    SET_LOADER = "setLoader",
    SET_BUTTON = "setButton",
    EXEC_TRANSACTION = "execTransaction",
    SHOW_TX_TOAST = "showTransactionToast",
    SHOW_TOAST = "showToast"
}
export interface IEngineAdapter {
    request<T>(method: RequestFromView, params: any, listener?: true | IResponseListener<T>): T | Promise<T>;
}
export type IResponseListener<T> = (event: ViewEvent, data: T) => boolean | Promise<boolean>;
export interface IResponseListenerEntry {
    processResponse: IResponseListener<any>;
    resolve: (data: any) => void;
    reject: (error: Error | any) => void;
}
//# sourceMappingURL=IEngineAdapter.d.ts.map